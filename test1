stage('Snowflake: CREATE objects + PUT + COPY') {
  steps {
    container('aws-build-tools') {
      withCredentials([sshUserPrivateKey(credentialsId: params.CREDENTIAL_ID, keyFileVariable: 'PRIVATE_KEY_PATH')]) {
        withEnv([
          "SNOW_ACCOUNT=${params.SNOW_ACCOUNT}",
          "SNOW_USER=${params.SNOW_USER}",
          "SNOW_ROLE=${params.SNOW_ROLE}",
          "SNOW_WAREHOUSE=${params.SNOW_WH}",
          "SNOW_DATABASE=${params.SNOW_DB}",       // *** 必须填写 DB_INVESTMENTS_DEV02 ***
          "SNOW_SCHEMA=${params.SNOW_SCHEMA}",     // 例如：EXAMPLE / INVESTMENTS_CORE ...
          "SNOW_STAGE=${params.SNOW_STAGE}",       // 例如：INT_LOAD_STAGE
          "SNOW_TABLE=${params.SNOW_TABLE}"        // 例如：S3_FILESIZES
        ]) {
          sh '''#!/bin/bash
set -euo pipefail

command -v snowsql >/dev/null 2>&1 || { echo "snowsql not found in PATH"; exit 127; }
snowsql -v

# 为了稳妥，所有对象都用全限定名 "DB"."SCHEMA"."OBJECT"
FQ_STAGE="\\\"${SNOW_DATABASE}\\\".\\\"${SNOW_SCHEMA}\\\".\\\"${SNOW_STAGE}\\\""
FQ_TABLE="\\\"${SNOW_DATABASE}\\\".\\\"${SNOW_SCHEMA}\\\".\\\"${SNOW_TABLE}\\\""

# 1) 只 USE 现有 DB/SCHEMA（不创建 DB）
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "USE DATABASE \\\"${SNOW_DATABASE}\\\"; USE SCHEMA \\\"${SNOW_SCHEMA}\\\"; 
      SELECT current_database() AS db, current_schema() AS sch;"

# 2) 目标表（如 schema 没权限创建表，你可以把这一句删掉并预先建表）
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "CREATE TABLE IF NOT EXISTS ${FQ_TABLE} (
         TIME TIMESTAMP_NTZ,
         SIZE NUMBER,
         NAME STRING
       );"

# 3) Stage（不创建 DB，只在现有 schema 下创建/复用 stage）
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "CREATE STAGE IF NOT EXISTS ${FQ_STAGE};
      REMOVE @${FQ_STAGE} pattern='.*S3_FILESIZES.*';"

# 4) PUT CSV 到内部 stage
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "PUT file://$PWD/S3_FILESIZES.csv @${FQ_STAGE} OVERWRITE=TRUE AUTO_COMPRESS=FALSE;"

# 5) COPY INTO（内联 FILE_FORMAT，避免额外对象依赖）
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "COPY INTO ${FQ_TABLE}
      FROM @${FQ_STAGE}/S3_FILESIZES.csv
      FILE_FORMAT=(TYPE=CSV SKIP_HEADER=1 FIELD_OPTIONALLY_ENCLOSED_BY='\\\"')
      ON_ERROR=ABORT_STATEMENT;"

# 6) 装载后简单核对
snowsql \
  -a "$SNOW_ACCOUNT" -u "$SNOW_USER" -r "$SNOW_ROLE" \
  -w "$SNOW_WAREHOUSE" -d "$SNOW_DATABASE" -s "$SNOW_SCHEMA" \
  --private-key-path "$PRIVATE_KEY_PATH" -o friendly=false -o exit_on_error=true \
  -q "SELECT COUNT(*) AS loaded_rows FROM ${FQ_TABLE};"
'''
        }
      }
    }
  }
}
