CREATE OR REPLACE VIEW DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.INTEREST_FIELDS AS
WITH
cob AS (
  SELECT MAX(COB_DAY_DATE) AS cob_date
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.V_INT_COB_DAYS
),

norm AS (
  SELECT 'ARRANGEMENT' AS src, a.ARRANGEMENT_ID AS base_id
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARRANGEMENT a
  UNION ALL
  SELECT 'ARR_ACCOUNT', SPLIT_PART(aa.ARRANGEMENT_KEY,'-',1)
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_ACCOUNT aa
  UNION ALL
  SELECT 'ARR_INTEREST', SPLIT_PART(ai.ARRANGEMENT_KEY,'-',1)
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_INTEREST ai
  UNION ALL
  SELECT 'PAYMENT_SCHEDULE', SPLIT_PART(ps.ARRANGEMENT_KEY,'-',1)
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_PAYMENT_SCHEDULE ps
  UNION ALL
  SELECT 'INTEREST_ACCRUALS', REGEXP_SUBSTR(ia.PROPERTY_NAME,'AA[0-9A-Z]+')
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_INTEREST_ACCRUALS ia
),
srcs AS (SELECT COUNT(DISTINCT src) AS n FROM norm),
present_in_all AS (
  SELECT base_id
  FROM norm
  GROUP BY base_id
  HAVING COUNT(DISTINCT src) = (SELECT n FROM srcs)
),


arrangement_latest AS (
  SELECT a.*
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARRANGEMENT a
  WHERE a.ARRANGEMENT_ID IN (SELECT base_id FROM present_in_all)
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY a.ARRANGEMENT_ID ORDER BY a.MIS_DATE DESC
  ) = 1
),
arr_account_latest AS (
  SELECT
    SPLIT_PART(aa.ARRANGEMENT_KEY,'-',1) AS ARRANGEMENT_ID,
    aa.ALT_ID_TYPE,
    aa.ACTIVITY,
    aa.MIS_DATE
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_ACCOUNT aa, cob
  WHERE SPLIT_PART(aa.ARRANGEMENT_KEY,'-',1) IN (SELECT base_id FROM present_in_all)
    AND TRY_TO_DATE(SPLIT_PART(SPLIT_PART(aa.ARRANGEMENT_KEY,'-',3),'.',1),'YYYYMMDD') <= cob.cob_date
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY SPLIT_PART(aa.ARRANGEMENT_KEY,'-',1) ORDER BY aa.MIS_DATE DESC
  ) = 1
),
arr_interest_latest AS (
  SELECT
    SPLIT_PART(ai.ARRANGEMENT_KEY,'-',1) AS ARRANGEMENT_ID,
    ai.DAY_BASIS, ai.EFFECTIVE_RATE, ai.MIS_DATE
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_INTEREST ai, cob
  WHERE SPLIT_PART(ai.ARRANGEMENT_KEY,'-',1) IN (SELECT base_id FROM present_in_all)
    AND TRY_TO_DATE(SPLIT_PART(SPLIT_PART(ai.ARRANGEMENT_KEY,'-',3),'.',1),'YYYYMMDD') <= cob.cob_date
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY SPLIT_PART(ai.ARRANGEMENT_KEY,'-',1) ORDER BY ai.MIS_DATE DESC
  ) = 1
),
payment_schedule_latest AS (
  SELECT
    SPLIT_PART(ps.ARRANGEMENT_KEY,'-',1) AS ARRANGEMENT_ID,
    ps.PAYMENT_TYPE, ps.PAYMENT_METHOD, ps.PAYMENT_FREQ,
    ps.START_DATE, ps.MIS_DATE
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_ARR_PAYMENT_SCHEDULE ps, cob
  WHERE SPLIT_PART(ps.ARRANGEMENT_KEY,'-',1) IN (SELECT base_id FROM present_in_all)
    AND ps.PAYMENT_TYPE = 'INTEREST'
    AND TRY_TO_DATE(SPLIT_PART(ps.ID_COMP_3,'-',1),'YYYYMMDD') <= cob.cob_date
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY SPLIT_PART(ps.ARRANGEMENT_KEY,'-',1)
    ORDER BY TRY_TO_DATE(SPLIT_PART(ps.ID_COMP_3,'-',1),'YYYYMMDD') DESC
  ) = 1
),
break_details_latest AS (
  SELECT
    b.ARRANGEMENT_ID,
    COALESCE(UPPER(b.BREAK_CANCELLED),'NO') AS BREAK_CANCELLED,
    UPPER(b.BRK_REASON) AS BRK_REASON
  FROM DB_INVESTMENTS_SYST02.INVESTMENTS_SERVE.BNK_AA_BNZ_BREAK_DETAILS b
  WHERE b.ARRANGEMENT_ID IN (SELECT base_id FROM present_in_all)
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY b.ARRANGEMENT_ID ORDER BY b.MIS_DATE DESC
  ) = 1
)

SELECT
  a.ARRANGEMENT_ID,
  a.ACTIVE_PRODUCT,
  a.ARR_STATUS,
  a.CUSTOMER_ROLE,
  ai.DAY_BASIS,
  ai.EFFECTIVE_RATE,
  ps.PAYMENT_TYPE,
  ps.PAYMENT_METHOD,
  ps.PAYMENT_FREQ,
  CASE
    WHEN ps.PAYMENT_FREQ = 'M' AND ps.START_DATE = 'R_RENEWAL' THEN 'ROLLOVER_MATURITY'
    WHEN ps.PAYMENT_METHOD = 'CAPITALISE' THEN 'ROLLOVER'
    ELSE 'PAY_AT_MATURITY'
  END AS PAYMENT_ADJUSTED,
  bd.BREAK_CANCELLED,
  bd.BRK_REASON
FROM arrangement_latest a
LEFT JOIN arr_account_latest      aa USING (ARRANGEMENT_ID)
LEFT JOIN arr_interest_latest     ai USING (ARRANGEMENT_ID)
LEFT JOIN payment_schedule_latest ps USING (ARRANGEMENT_ID)
LEFT JOIN break_details_latest    bd USING (ARRANGEMENT_ID);


